#!/bin/bash

# Wraps qsub so that a record is inserted into a postgres database using the
# details below.  This will pass through all variables to qsub.

PGHOST=queue1     # Postgres database server
PGUSER=sge        # Postgres user
PGDB=sgedb        # Postgres database name

# The Postgres jobs DB is the following column order:
# SGEID, jobname, username, project, starttime, endtime, firsttask, lasttask,
# chunk, status, submissionscript

# Parse name option from cmd line params if provided
N="unnamed"
I=0
PRIORITY=0

# Prepend names starting with numbers as SGE doesn't like 'em
FIXED_PARAMS="`echo $@ | sed -e 's/-N[ \t]*\([0-9]\)/-N theQ_\1/g'`"
ARGV=( ${FIXED_PARAMS} )

for WORD in ${FIXED_PARAMS} ; do
	((I++))
	case $WORD in
		-N)	# Get the job name
			if [[ ${2:0:1} != "-" ]]; then
				N=${ARGV[$I]};
			else
				echo "Missing argument to -N"
				exit 1
			fi ;;
		-p)
                        PRIORITY=${ARGV[$I]} ;;
	esac
done

# Actually submit the job to SGE
qsub -ckpt relocate_on_suspend ${FIXED_PARAMS} > /tmp/OUT.$$.tmp 2>&1

# If there was an error
if [ "$?" -ne "0" ]; then
	echo "There was an error with qsub - here it is..."
	cat /tmp/OUT.$$.tmp
	rm /tmp/OUT.$$.tmp
	exit 1
# If there wasn't an error - create and submit the psql command
else
	# Get the last param which should be path to the submission script
	# Make sure it's absolute
	SUBMIT_SCRIPT=${!#}
	if [ "`echo ${SUBMIT_SCRIPT} | cut -c 1`" != "/" ]; then
		SUBMIT_SCRIPT="${PWD}/${SUBMIT_SCRIPT}"
	fi

	# Get the SGE job id from the stdout of qsub
	JOB_ID=`cat /tmp/OUT.$$.tmp | awk '{print $3}'`
	SGE_ID=`echo $JOB_ID | awk -F\. '{print $1}'`

	# Check for array/non-array jobs
	if [[ $JOB_ID == *:* ]]; then
		TASKS=`echo $JOB_ID | awk -F\. '{print $2}'`
		FIRST=`echo $TASKS | awk -F\- '{print $1}'`
		LAST=`echo $TASKS | awk -F\- '{print $2}' | awk -F\: '{print $1}'`
		CHUNK=`echo $TASKS | awk -F\- '{print $2}' | awk -F\: '{print $2}'`
	else
		TASKS=1
		FIRST=1
		LAST=1
		CHUNK=1
	fi

	# Now compose the psql command to insert the row
	PSQL_CMD="INSERT INTO jobs (sgeid, jobname, username, project, "
	PSQL_CMD="${PSQL_CMD}priority, submittime, starttime, endtime, "
	PSQL_CMD="${PSQL_CMD}firsttask, lasttask, chunk, status, "
	PSQL_CMD="${PSQL_CMD}submissionscript, donetasks) VALUES (${SGE_ID}, "
	PSQL_CMD="${PSQL_CMD}'${N}', '${USER}', "

	# $JOB (a little confusingly) has nothing to do with SGE
	# The env variable $JOB determines what project/show you're on.
	if [ ! -z $JOB ]; then
		PSQL_CMD="${PSQL_CMD}'$JOB', "
	else
		PSQL_CMD="${PSQL_CMD}NULL, "
	fi

	PSQL_CMD="${PSQL_CMD}${PRIORITY},current_timestamp,NULL,NULL,${FIRST}, "
	PSQL_CMD="${PSQL_CMD}${LAST}, ${CHUNK}, 0, '${SUBMIT_SCRIPT}', 0);"

	psql -d ${PGDB} -U ${PGUSER} -h ${PGHOST} -c "${PSQL_CMD}" > /dev/null 2>&1
	if [ "$?" -ne "0" ]; then
		echo "There was an error adding to the database"
		echo "Please tell your friendly local sysadmin"
		exit 1
	fi

	# Output the SGEID
	echo $JOB_ID
fi

rm /tmp/OUT.$$.tmp
