#!/bin/sh

# Prolog script that updates the task start times and therefore
# (by trigger) the job start times

# This is needed because qstat may be run lower down
. /net/viewdisilon/ifs/systems/sge/default/common/settings.sh

PGHOST=queue1 #Put your database server here
PGUSER=sge #Put your database user here (sge probably)
PGDB=sgedb #Put your database name here (sgedb probably)

SGE_ID=${JOB_ID}
if [ "${SGE_TASK_ID}" = "undefined" ]; then
	TASK_NO=1
else
	TASK_NO=${SGE_TASK_ID}
fi

# Now compose the psql command to update the endtime of the task
# check for a returncode and add it to the task, increment attempts,
# increment the donetasks in jobs, and then set status to completed
# if the donetasks = (lasttask - firsttask + 1)
STATUS=3
PSQL_CMD="UPDATE tasks SET endtime = current_timestamp, attempts = attempts + 1"
if [ -e /tmp/${JOB_ID}-${SGE_TASK_ID}-return ]; then
	RETURNCODE=`cat /tmp/${JOB_ID}-${SGE_TASK_ID}-return`
	rm -f /tmp/${JOB_ID}-${SGE_TASK_ID}-return
	# Now fill in the status for the job (not the task)
	if [ "${RETURNCODE}" != "0" ]; then
		STATUS=2
	fi
	PSQL_CMD="${PSQL_CMD}, returncode = ${RETURNCODE}"
else
	# No return code left so the job either died, in which case it shouldn't
	# run the rest of the epilog, or, we're rescheduled so again, it 
	# shouldn't run the rest of the epilog
	# This simplification means that all scripts *MUST* have:
	# echo $? > /tmp/${JOB_ID}-${SGE_TASK_ID}-return
	# at the bottom of them
	exit 0
fi

# Figure out if it's batch or not and make the appropriate chunk of psql code
if [ ${SGE_TASK_STEPSIZE} -gt 1 ]; then
	PSQL_CMD="${PSQL_CMD} WHERE sgeid = ${SGE_ID} AND taskno >= ${TASK_NO}"
	PSQL_CMD="${PSQL_CMD} AND taskno < (${TASK_NO} + ${SGE_TASK_STEPSIZE});"
	PSQL_CMD="${PSQL_CMD}UPDATE jobs SET"
	# Check we don't set donetasks to a number greater than the total number
	# of tasks
	let TEMP_LAST=${TASK_NO}+${SGE_TASK_STEPSIZE}-1
	if [ ${TEMP_LAST} -gt ${SGE_TASK_LAST} ]; then
		let HOW_MANY_TASKS_HERE=${SGE_TASK_LAST}-${TASK_NO}+1
		PSQL_CMD="${PSQL_CMD} donetasks ="
		PSQL_CMD="${PSQL_CMD} donetasks + ${HOW_MANY_TASKS_HERE} "
	else
		PSQL_CMD="${PSQL_CMD} donetasks ="
		PSQL_CMD="${PSQL_CMD} donetasks + ${SGE_TASK_STEPSIZE} "
	fi
else
	PSQL_CMD="${PSQL_CMD} WHERE sgeid = ${SGE_ID} AND taskno = ${TASK_NO};"
	PSQL_CMD="${PSQL_CMD}UPDATE jobs SET donetasks = donetasks + 1 "
fi
PSQL_CMD="${PSQL_CMD}WHERE sgeid = ${SGE_ID};"
PSQL_CMD="${PSQL_CMD}UPDATE jobs SET endtime = current_timestamp "
PSQL_CMD="${PSQL_CMD}WHERE donetasks = (lasttask - firsttask + 1) "
PSQL_CMD="${PSQL_CMD}AND sgeid = ${SGE_ID};"
# If there's an error, set the job status
if [ ${STATUS} -eq 2 ]; then
	PSQL_CMD="${PSQL_CMD}UPDATE jobs SET status = ${STATUS} WHERE "
	PSQL_CMD="${PSQL_CMD}sgeid = ${SGE_ID};"
	# and if they've chosen to have a e-mail notification, send one
	# First, figure out if they want e-mail notifications
	PSQL_CMD2="SELECT (value='yes') AS want_mail FROM job_extras WHERE "
	PSQL_CMD2="${PSQL_CMD2}sgeid=${SGE_ID} AND key='email';"
	NOTIF=`psql -t -d ${PGDB} -U ${PGUSER} -h ${PGHOST} -c "${PSQL_CMD2}"`
	if [[ "$NOTIF" =~ "t" ]]; then
		# Now we know they do, get the jobname
		PSQL_CMD2="SELECT jobname FROM jobs WHERE sgeid=${SGE_ID};"
		JOBNAME=`psql -t -d ${PGDB} -U ${PGUSER} -h ${PGHOST} -c "${PSQL_CMD2}"`
		# Then send them a mail with the failed task number
		mail -s "Job ${SGE_ID}:${JOBNAME} - Task ${TASK_NO} has errored" $USER
	fi
# Otherwise, set the status to ${STATUS} if it's not already set to error
# and the job has finished
else
	PSQL_CMD="${PSQL_CMD}UPDATE jobs SET status = ${STATUS} WHERE "
	PSQL_CMD="${PSQL_CMD}status != 2 AND sgeid = ${SGE_ID} AND "
	PSQL_CMD="${PSQL_CMD}endtime IS NOT NULL;"
fi

# Run the task command
psql -d ${PGDB} -U ${PGUSER} -h ${PGHOST} -c "${PSQL_CMD}" > /dev/null 2>&1

# Check if the job is now done and send an e-mail if appropriate
PSQL_CMD="SELECT donetasks=(lasttask-firsttask+1)AS finished FROM jobs,"
PSQL_CMD="${PSQL_CMD}job_extras WHERE jobs.sgeid=${SGE_ID} AND "
PSQL_CMD="${PSQL_CMD}job_extras.sgeid=jobs.sgeid AND job_extras.key='email' "
PSQL_CMD="${PSQL_CMD}AND job_extras.value='yes';"
DONE_WANT_EMAIL=`psql -t -d ${PGDB} -U ${PGUSER} -h ${PGHOST} -c "${PSQL_CMD}"`
if [[ "$DONE_WANT_EMAIL" =~ "t" ]]; then
	PSQL_CMD="SELECT jobname FROM jobs WHERE sgeid=${SGE_ID};"
	JOBNAME=`psql -t -d ${PGDB} -U ${PGUSER} -h ${PGHOST} -c "${PSQL_CMD}"`
	mail -s "Job ${SGE_ID}:${JOBNAME} - All tasks have been run" $USER
fi

# Now remove empty logs
[ -r "$SGE_STDOUT_PATH" -a -f "$SGE_STDOUT_PATH" ] && \
[ ! -s "$SGE_STDOUT_PATH" ] && rm -f $SGE_STDOUT_PATH
[ -r "$SGE_STDERR_PATH" -a -f "$SGE_STDERR_PATH" ] && \
[ ! -s "$SGE_STDERR_PATH" ] && rm -f $SGE_STDERR_PATH

# If there were errors, put the job into error hold
if [ ${STATUS} -eq 2 ]; then
	exit 100
fi
